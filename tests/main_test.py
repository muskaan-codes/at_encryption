"""
-*- coding: utf-8 -*-
Implementation of the Encryption Utility Test File -- this has the main unit tests, negative tests and functional tests as well.
Created: April 2023
Owners: Project 4a: Muskaan Manocha, Prem Desai, Yeshaswini Murthy
"""

import logging
import unittest
import sys
import os

from rsa import DecryptionError

# getting the name of the directory
# where the this file is present.
current = os.path.dirname(os.path.realpath(__file__))
 
# Getting the parent directory name
# where the current directory is present.
parent = os.path.dirname(current)
 
# adding the parent directory to
# the sys.path.
sys.path.append(parent)
 
# now we can import the module in the parent
# directory.
from encryption_util import *


class TestEncryptionUtil(unittest.TestCase):

    def setUp(self):
        """
        Set up test case by initializing EncryptionUtil instance and setting up logging.
        """
        self.util = EncryptionUtil()
        logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

    def tearDown(self):
        """
        Tear down test case.
        """
        pass

    def test_nonce(self):
        """
        Test that nonce is set after calling the setter, and verify it is not None.
        """
        self.assertIsNone(self.util.nonce)
        self.util.nonce = 16
        logging.info("Util.nonce is initialized to: %s", self.util.nonce)
        self.assertIsNotNone(self.util.nonce)

    def test_rsa_keypair(self):
        """
        Test that the length of rsa_keypair is 2, and verify that it is initialized to None, then set to a non-None value after setter is called
        """
        logging.info("Util.rsa_keypair is initialized to %s", self.util.rsa_keypair)
        keypair = self.util.generate_rsa_key_pair()  # using setter function
        logging.info("keypair after generation is:")
        logging.info(keypair)
        logging.info("Util.rsa_keypair is updated to:")
        logging.info(self.util.rsa_keypair)
        self.assertIsNotNone(self.util.rsa_keypair)
        self.assertEqual(len(self.util.rsa_keypair), 2)

    def test_generate_aes_key_base64(self):
        """
        Test that a non-None AES key is generated and logged.
        """
        key = self.util.generate_aes_key_base64()
        self.assertIsNotNone(key)
        logging.info("Generated AES key: %s", key)

    def test_aes_encrypt_decrypt(self):
        """
        Unit Test for AES encryption and decryption, verify that decrypted text is equal to original plaintext.
        """
        plaintext = "Hello World!!! 1234"
         # testing with multiple types of characters
        key = self.util.generate_aes_key_base64()
        logging.info("Original text: %s, encrypting using key:" % plaintext)
        logging.info(key)
        logging.info("Type of key is %s" % type(key))
        self.assertEqual(str(type(key)), "<class 'bytes'>")
        encrypted = self.util.aes_encrypt(plaintext, key)
        logging.info("Decrypting.... %s" % encrypted)
        decrypted = self.util.aes_decrypt(encrypted, key)
        logging.info("Comparing decrypted text %s with original %s" % (decrypted, plaintext))
        self.assertEqual(plaintext, decrypted)

    def test_rsa_encrypt_decrypt(self):
        """
        Unit Test for RSA encryption and decryption, verify that decrypted text is equal to original plaintext.
        """
        plaintext = "Hello World!!! 1234" # testing with multiple types of characters
        keypair = self.util.generate_rsa_key_pair()
        logging.info("keypair after generation is")
        logging.info(keypair)
        pubkey = self.util.public_key_from_base64()
        privkey = self.util.private_key_from_base64()
        logging.info("Type of the generated public key and private key are: %s and %s respectively" % (type(pubkey), type(privkey)))
        self.assertEqual(str(type(privkey)), "<class 'rsa.key.PrivateKey'>")
        self.assertEqual(str(type(pubkey)), "<class 'rsa.key.PublicKey'>")
        logging.info("Original text: %s, encrypting using privkey:" % plaintext)
        logging.info(privkey)
        encrypted = self.util.rsa_encrypt_to_base64(plaintext, pubkey)
        logging.info("Encrypted text: %s, decrypting using" % encrypted)
        logging.info("privkey")
        self.assertIsNotNone(encrypted)
        decrypted = self.util.rsa_decrypt_from_base64(encrypted, privkey)
        logging.info("Decrypted text: %s", decrypted)
        self.assertEqual(plaintext, decrypted)
        print(pubkey)

    def test_aes_decrypt_invalid_key(self):
        """negative test"""
        plaintext = "hello world"
        key = self.util.generate_aes_key_base64()
        logging.info("Original text: %s, Initial key:" % plaintext)
        logging.info(key)
        encrypted = self.util.aes_encrypt(plaintext, key)
        invalid_key = self.util.generate_aes_key_base64()
        logging.info("Invalid key is:")
        logging.info(key)
        logging.info("Decryption should fail")
        with self.assertRaises(ValueError):
            decrypted = self.util.aes_decrypt(encrypted, invalid_key)

    def test_rsa_decrypt_invalid_key(self):
        """negative test"""
        keypair = self.util.generate_rsa_key_pair() # generate key pair
        logging.info("keypair after generation is")
        logging.info(keypair)
        plaintext = "hello world"
        pubkey = self.util.public_key_from_base64()
        privkey = self.util.private_key_from_base64()
        logging.info("original priv key")
        logging.info(privkey)
        logging.info("Original text: %s, encrypting using pubkey:" % plaintext)
        logging.info(pubkey)
        encrypted = self.util.rsa_encrypt_to_base64(plaintext, pubkey)
        keypair = self.util.generate_rsa_key_pair() # generate new key pair
        invalid_key = self.util.private_key_from_base64()
        logging.info("invalid key after generation is")
        logging.info(invalid_key)
        with self.assertRaises(DecryptionError):
            decrypted = self.util.rsa_decrypt_from_base64(encrypted, invalid_key)

    """
    Expected OP of tests:

        base) muskaans-air:atPlatform_Python_Client_SDK muskaanmanocha$  cd /Users/muskaanmanocha/workspace/682/atPlatform_Python_Client_SDK ; /usr/bin/env /Users/muskaanmanocha/opt/anaconda3/bin/python /Users/muskaanmanocha/.vscode/extensions/ms-python.python-2023.6.1/pythonFiles/lib/python/debugpy/adapter/../../debugpy/launcher 52632 -- /Users/muskaanmanocha/workspace/682/atPlatform_Python_Client_SDK/main/api/proj_4a/tests_proj_4a/main_test.py 
        2023-05-04 15:52:56,656 INFO Original text: hello world, Initial key:
        2023-05-04 15:52:56,656 INFO b'QGLxQWf7tHQyL8ca0SlhvyD0U0uAKXmvFiucnD9F+/E='
        2023-05-04 15:52:56,718 INFO Invalid key is:
        2023-05-04 15:52:56,718 INFO b'QGLxQWf7tHQyL8ca0SlhvyD0U0uAKXmvFiucnD9F+/E='
        2023-05-04 15:52:56,718 INFO Decryption should fail
        .2023-05-04 15:52:56,718 INFO Original text: Hello World!!! 1234, encrypting using key:
        2023-05-04 15:52:56,718 INFO b'Hnz/DUJHG8RbSXGFJj+3Rx/1i9sJCmUjAMDnY4Yh13E='
        2023-05-04 15:52:56,718 INFO Type of key is <class 'bytes'>
        2023-05-04 15:52:56,719 INFO Decrypting.... NA8J6/lqwrUyDbJa3CV6RmE+7VoS2m+fZ9g8QyJn0e4=
        2023-05-04 15:52:56,719 INFO Comparing decrypted text Hello World!!! 1234 with original Hello World!!! 1234
        .2023-05-04 15:52:56,719 INFO Generated AES key: b'8HGTlt2LsxfnvffTU/aF7Y4NqPMNCPmmMFgNt6FtYFU='
        .2023-05-04 15:52:56,719 INFO Util.nonce is initialized to: b'{\xff\xba\xaa?b\x8a\xcf\xbf.\xdb\xfcM5\xaa\xd1'
        .2023-05-04 15:53:02,468 INFO keypair after generation is
        2023-05-04 15:53:02,468 INFO (PublicKey(16791956767353359881137395962498216069384439949669838860826872775088798666399168659000767998844922504200159470666468784443069184255073114541429435963890155677143581097039280507816844563436278270733501140959128324245464846449095488502314897998291066353727318441183594654183666591736960165669160289764598738283771505481029014962802455465605795153300357462947744295344386387678249973872681407460971376201036518422855252479003096548164209362828687515412422355777481553892745247316493854269086207192204818936725105066763724017722045952765500464245193111010481428330135080454162482480350726953246968642304027966094620825651, 65537), PrivateKey(16791956767353359881137395962498216069384439949669838860826872775088798666399168659000767998844922504200159470666468784443069184255073114541429435963890155677143581097039280507816844563436278270733501140959128324245464846449095488502314897998291066353727318441183594654183666591736960165669160289764598738283771505481029014962802455465605795153300357462947744295344386387678249973872681407460971376201036518422855252479003096548164209362828687515412422355777481553892745247316493854269086207192204818936725105066763724017722045952765500464245193111010481428330135080454162482480350726953246968642304027966094620825651, 65537, 5352200816534848018021561320484996802926157225821341592746273790360100635403088852371439686404192840536447063227670879628778738573694589158123189768370561086712120871203343615481118545029836837166060474747016670966988345171050790535496832389128310497322275278360073069124961646623943129844540094329538594473580855858657507667946197397086156334984200647346471761012949922208207441297840510885689543437316248132396765801169062200642809359652214046230018432021887413455257231973303956875390554090983599743371527959814230743561314077727852669900341817621603310213744827554504232093527289516101391060650993969355614143697, 1985022299666435827212141681477237470611989395570354055173491356342859858050996082613924938806017045008173731164674136295923856003068403720857610349881544119490848577110054881300938970434132436650682098614474341386484328494384464102329744640448977485342974710201931134309237443152762906767112753987469774561966764539774946566473, 8459329031303622620161246384399023845848582063736635414379736002731313079284735812943802990788595386379422173293394918360334945816718863906986840248993548321526769142583166698532230069322855097508350873710065971517532599598965529720155870656775904943287378250054236258426966534670534322587))
        2023-05-04 15:53:02,469 INFO original priv key
        2023-05-04 15:53:02,469 INFO PrivateKey(16791956767353359881137395962498216069384439949669838860826872775088798666399168659000767998844922504200159470666468784443069184255073114541429435963890155677143581097039280507816844563436278270733501140959128324245464846449095488502314897998291066353727318441183594654183666591736960165669160289764598738283771505481029014962802455465605795153300357462947744295344386387678249973872681407460971376201036518422855252479003096548164209362828687515412422355777481553892745247316493854269086207192204818936725105066763724017722045952765500464245193111010481428330135080454162482480350726953246968642304027966094620825651, 65537, 5352200816534848018021561320484996802926157225821341592746273790360100635403088852371439686404192840536447063227670879628778738573694589158123189768370561086712120871203343615481118545029836837166060474747016670966988345171050790535496832389128310497322275278360073069124961646623943129844540094329538594473580855858657507667946197397086156334984200647346471761012949922208207441297840510885689543437316248132396765801169062200642809359652214046230018432021887413455257231973303956875390554090983599743371527959814230743561314077727852669900341817621603310213744827554504232093527289516101391060650993969355614143697, 1985022299666435827212141681477237470611989395570354055173491356342859858050996082613924938806017045008173731164674136295923856003068403720857610349881544119490848577110054881300938970434132436650682098614474341386484328494384464102329744640448977485342974710201931134309237443152762906767112753987469774561966764539774946566473, 8459329031303622620161246384399023845848582063736635414379736002731313079284735812943802990788595386379422173293394918360334945816718863906986840248993548321526769142583166698532230069322855097508350873710065971517532599598965529720155870656775904943287378250054236258426966534670534322587)
        2023-05-04 15:53:02,469 INFO Original text: hello world, encrypting using pubkey:
        2023-05-04 15:53:02,469 INFO PublicKey(16791956767353359881137395962498216069384439949669838860826872775088798666399168659000767998844922504200159470666468784443069184255073114541429435963890155677143581097039280507816844563436278270733501140959128324245464846449095488502314897998291066353727318441183594654183666591736960165669160289764598738283771505481029014962802455465605795153300357462947744295344386387678249973872681407460971376201036518422855252479003096548164209362828687515412422355777481553892745247316493854269086207192204818936725105066763724017722045952765500464245193111010481428330135080454162482480350726953246968642304027966094620825651, 65537)
        2023-05-04 15:53:08,065 INFO invalid key after generation is
        2023-05-04 15:53:08,065 INFO PrivateKey(20100390151410583209324407397324673196546551269373638039883880511780338835581399465065246921770846397754747725308182089623003027023353106099128240810651250768281271334284348219763419034346062630074220489101759069524946626761064251997493663687169139044008308342744516174340394992954341787492210018274176039009741259058337959096896722684864417217977970634739769318172192798501667058072816693038170164384077819109424267426943143790103332205811770500249009834577080705430628314662864407529598704940656486520795512182873285445713402879511942748114218747191181478575468587755799679416027477392004408747132659596948015260307, 65537, 9572198553878332880098490240177350969135265042909367887220591586014989625074316451846840051092789051588044562718286815342995933188868127032879020945426637418222660151410874894163851077436266760526365586842026649982049593683153261590273849026909208989784385970933310188155755187605551172430318157078833116587151548258082144713962487011743228290080281823165284001639791328937206713633829576561716065915918369049373836662292153666307690123256297725502315360284402083875729120166586307228289335337076930634120396166152495189214154962773898615192992399257364650765715634213380755373383463467273013956688842272526957620673, 2118346999729196274331101474552969730691799452824123577160407888676832579908265743003155379254000954430989014739246127470511056988895781759662926160785891421890436417251465047149400142110362045095859654606949314036733490459266331694412328501038396976565053446869497531992249570253897609358646857371550386457665152982113975242627, 9488714622288115441355445685390515403721854455329481080261142031558406551863343276567387517937112917053443930067596988123224434084383381095593460974240048533694251551713875368767295560802209207387967239886138096319971360234214958527060558051651042665344988964552980454173797674923779793841)
        .2023-05-04 15:53:12,352 INFO keypair after generation is
        2023-05-04 15:53:12,352 INFO (PublicKey(20043123980675197101779594016073169491086392205950217454649093356092773383528470863614856089005923992520689795874112910031314888494441587767452241240246071319163179141250453780243058033042695773360537156920328149120083835589925931685495194234932554881159523867487067254783195125794374058193486276179280032959224662484802858448536434653704628799558054987468048161540263890672174656271905423150880758995572056521168593936529560118592696017334121903519976499147374578921420668782436854832150456704045320219011866902835784771953680147128638166303956582046532358355867539651750147646215748771547011622878869048060211491743, 65537), PrivateKey(20043123980675197101779594016073169491086392205950217454649093356092773383528470863614856089005923992520689795874112910031314888494441587767452241240246071319163179141250453780243058033042695773360537156920328149120083835589925931685495194234932554881159523867487067254783195125794374058193486276179280032959224662484802858448536434653704628799558054987468048161540263890672174656271905423150880758995572056521168593936529560118592696017334121903519976499147374578921420668782436854832150456704045320219011866902835784771953680147128638166303956582046532358355867539651750147646215748771547011622878869048060211491743, 65537, 12311457634100748196121875226376573706962079506885148143100140411414478620127899096474962947938149079800919914288238541682112579935490494791744471418700060225891220829610422621991616097443684652217858366861234569342174571394907583592951989549742053027998806671186648449098254466697870242557723614458391556257830481454838540817304378723962683712062662799133824497546356459993736606668632263638746150987630708085844906367149336076515239790058470698301373139694123315502475395965514705037945543622554721497675656832835603850322783494334610495819953423411079018890481335140496414598541589428627454421333807085407217455617, 3265376915577543331108698079353895572345949689353383288916544577785468070436343624785827813228343029970532706818779207504671701000427480254463419982306642543893805553846154579421029083690065764677454868151896972650562967762730253577042818971392305047167951671975923949518771716398473837525898781435670997472643557338545863583907, 6138073643216833240607889143195748504169587264290106377173465763503196819172774597229761860389986301763932480748316150301422051816180260627037798690544350685502497028117922717664680095651363628868426212793979977627849914291298848497631513309349602957543215686830965451632526659923409652949))
        2023-05-04 15:53:12,353 INFO Type of the generated public key and private key are: <class 'rsa.key.PublicKey'> and <class 'rsa.key.PrivateKey'> respectively
        2023-05-04 15:53:12,353 INFO Original text: Hello World!!! 1234, encrypting using privkey:
        2023-05-04 15:53:12,353 INFO PrivateKey(20043123980675197101779594016073169491086392205950217454649093356092773383528470863614856089005923992520689795874112910031314888494441587767452241240246071319163179141250453780243058033042695773360537156920328149120083835589925931685495194234932554881159523867487067254783195125794374058193486276179280032959224662484802858448536434653704628799558054987468048161540263890672174656271905423150880758995572056521168593936529560118592696017334121903519976499147374578921420668782436854832150456704045320219011866902835784771953680147128638166303956582046532358355867539651750147646215748771547011622878869048060211491743, 65537, 12311457634100748196121875226376573706962079506885148143100140411414478620127899096474962947938149079800919914288238541682112579935490494791744471418700060225891220829610422621991616097443684652217858366861234569342174571394907583592951989549742053027998806671186648449098254466697870242557723614458391556257830481454838540817304378723962683712062662799133824497546356459993736606668632263638746150987630708085844906367149336076515239790058470698301373139694123315502475395965514705037945543622554721497675656832835603850322783494334610495819953423411079018890481335140496414598541589428627454421333807085407217455617, 3265376915577543331108698079353895572345949689353383288916544577785468070436343624785827813228343029970532706818779207504671701000427480254463419982306642543893805553846154579421029083690065764677454868151896972650562967762730253577042818971392305047167951671975923949518771716398473837525898781435670997472643557338545863583907, 6138073643216833240607889143195748504169587264290106377173465763503196819172774597229761860389986301763932480748316150301422051816180260627037798690544350685502497028117922717664680095651363628868426212793979977627849914291298848497631513309349602957543215686830965451632526659923409652949)
        2023-05-04 15:53:12,353 INFO Encrypted text: b'GzbaVg6T6vZ8Pc5FdF7/jjp0A8wBg793vSV2gqmELS3DS7LKgN7UkTnyxjdJpqs3YaNIxHchlYYlCIraSmJGxoHhr6e1ePVpL+FpgU3VulFRR13wiSdVT0IOAfe/BNRjn/zqYBWJ35UykxR2LRrJok5+sxf8ORpQKvWB3+qWs33Ybs1g58wmnOCuj16JvUOC12W9CHAaYTJuaE2ise8SpsIsdN4AFKxPbUtlSaBX74uyxxfzts4MfjygKB8VhcuMIJN+siEaOxKfU9lgj6iputYXpPvszV4evNRB3tJ9cuSlDXXlc52ZwT60zL+OJpC7QXun5FjWNFX+gSyo6KEd4A==', decrypting using
        2023-05-04 15:53:12,353 INFO privkey
        2023-05-04 15:53:12,370 INFO Decrypted text: Hello World!!! 1234
        PublicKey(20043123980675197101779594016073169491086392205950217454649093356092773383528470863614856089005923992520689795874112910031314888494441587767452241240246071319163179141250453780243058033042695773360537156920328149120083835589925931685495194234932554881159523867487067254783195125794374058193486276179280032959224662484802858448536434653704628799558054987468048161540263890672174656271905423150880758995572056521168593936529560118592696017334121903519976499147374578921420668782436854832150456704045320219011866902835784771953680147128638166303956582046532358355867539651750147646215748771547011622878869048060211491743, 65537)
        .2023-05-04 15:53:12,370 INFO Util.rsa_keypair is initialized to ()
        2023-05-04 15:53:31,352 INFO keypair after generation is:
        2023-05-04 15:53:31,352 INFO (PublicKey(22203418274860950138613344847722253154746488068665384050336122603021707096414847791093391304069650209358191468811990365597079610421101742384449715404453463045517353104090349829544439770036382591738483593006106986889587417463210044079800439903498031969814171067579934988870959911923514428199431577808142287646706391375272211360203714822051512486330616922775932357112681603216561426232214152874786929544011214187668399066000449006106419228511784188749067681411045884248179684139696092973506201403852174024783893312257686456498724030333038089597441993965641554433145883860713253040587201817894478362388182269046486004169, 65537), PrivateKey(22203418274860950138613344847722253154746488068665384050336122603021707096414847791093391304069650209358191468811990365597079610421101742384449715404453463045517353104090349829544439770036382591738483593006106986889587417463210044079800439903498031969814171067579934988870959911923514428199431577808142287646706391375272211360203714822051512486330616922775932357112681603216561426232214152874786929544011214187668399066000449006106419228511784188749067681411045884248179684139696092973506201403852174024783893312257686456498724030333038089597441993965641554433145883860713253040587201817894478362388182269046486004169, 65537, 5240097509151690126095680375356212361634861695806147597640246094586824902883080561893914632956120661430079915896593603379618083439632278704552905201041880356516424316965461354861587346432591201098907880022360754477947550023703705567576688038625571211332770555598499389243742267081511171718430300663610227399095252988461310994050062501730920182401310719750930350138851916585847607189881843089615897687677779231398729384946701255771822454911917530964435179188480506007625080726125567171778953567109383381155741990110366655579823094780048754412247006137423580111905571424597708413153348249227732183341718097171783314909, 3222447751180790714236901810082521141210663976932454783499536940407511835669774913974741109357887481514437071656870335742833352085572223855889335688369634992128376474486103705176781925554878236451192961530168746064801811670856027673454289865521912032103413911044082069891080255795258926024056504325062886358118460092126117910807, 6890233756846802589617472488241924620643932580108631841464037975455755167975001578721480826600594698318335998436431266394002880909848953350719869171997574907463735772846312898832287705547058698559086898851337137993450592701844661383472789476596758239597162598563932852548885625918417934367))
        2023-05-04 15:53:31,352 INFO Util.rsa_keypair is updated to:
        2023-05-04 15:53:31,352 INFO (PublicKey(22203418274860950138613344847722253154746488068665384050336122603021707096414847791093391304069650209358191468811990365597079610421101742384449715404453463045517353104090349829544439770036382591738483593006106986889587417463210044079800439903498031969814171067579934988870959911923514428199431577808142287646706391375272211360203714822051512486330616922775932357112681603216561426232214152874786929544011214187668399066000449006106419228511784188749067681411045884248179684139696092973506201403852174024783893312257686456498724030333038089597441993965641554433145883860713253040587201817894478362388182269046486004169, 65537), PrivateKey(22203418274860950138613344847722253154746488068665384050336122603021707096414847791093391304069650209358191468811990365597079610421101742384449715404453463045517353104090349829544439770036382591738483593006106986889587417463210044079800439903498031969814171067579934988870959911923514428199431577808142287646706391375272211360203714822051512486330616922775932357112681603216561426232214152874786929544011214187668399066000449006106419228511784188749067681411045884248179684139696092973506201403852174024783893312257686456498724030333038089597441993965641554433145883860713253040587201817894478362388182269046486004169, 65537, 5240097509151690126095680375356212361634861695806147597640246094586824902883080561893914632956120661430079915896593603379618083439632278704552905201041880356516424316965461354861587346432591201098907880022360754477947550023703705567576688038625571211332770555598499389243742267081511171718430300663610227399095252988461310994050062501730920182401310719750930350138851916585847607189881843089615897687677779231398729384946701255771822454911917530964435179188480506007625080726125567171778953567109383381155741990110366655579823094780048754412247006137423580111905571424597708413153348249227732183341718097171783314909, 3222447751180790714236901810082521141210663976932454783499536940407511835669774913974741109357887481514437071656870335742833352085572223855889335688369634992128376474486103705176781925554878236451192961530168746064801811670856027673454289865521912032103413911044082069891080255795258926024056504325062886358118460092126117910807, 6890233756846802589617472488241924620643932580108631841464037975455755167975001578721480826600594698318335998436431266394002880909848953350719869171997574907463735772846312898832287705547058698559086898851337137993450592701844661383472789476596758239597162598563932852548885625918417934367))
        .
        ----------------------------------------------------------------------
        Ran 7 tests in 34.698s

        OK
    
    """

if __name__ == '__main__':
    unittest.main()
